apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'AndResGuard'
/* 崩溃分析插件 */
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

apply from: "${rootProject.file('loadProperties.gradle')}"

android {
    compileSdkVersion 'android-S'
    defaultConfig {
        applicationId "com.ryuunoakaihitomi.rebootmenu"
        minSdkVersion 21
        // 以下方式会出现这样的错误：android:targetSdkVersion="android-30"
        //targetSdkVersion compileSdkVersion
        targetSdkVersion 31
        // 版本号：发布日期
        versionCode 20210404
        // 版本名说明： R3.x.y (R3:Refactoring 第三次重构)
        versionName 'R3.7.1'
        resConfigs "en", "zh-rCN"

        buildConfigField 'String', 'BUILD_TIME', '\"' + new Date() + '\"'
    }

    signingConfigs {
        release {
            Properties p = loadProps('signInfo')
            keyAlias p['KEY_ALIAS']
            keyPassword p['KEY_PWD']
            storePassword p['STORE_PWD']
            storeFile file(p['STORE_FILE'])
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            firebaseCrashlytics {
                mappingFileUploadEnabled true  // TODO 此值发布时必须为true
            }
            signingConfig signingConfigs.release
        }
        debug {
            versionNameSuffix '-debug'
        }
    }
    flavorDimensions "version"
    productFlavors {
        normal {
            dimension "version"
        }
        // Free/Libre and Open Source Software
        floss {
            dimension "version"
            versionNameSuffix '-floss'
            applicationId 'github.ryuunoakaihitomi.powerpanel'  // 现在想要个新的packageName
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    // ZXing需要method sort(Ljava/util/Comparator;)V in class Ljava/util/List;
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'

    def lifecycle_version = "2.3.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    /* 崩溃报告组件 */
    normalImplementation platform('com.google.firebase:firebase-bom:26.5.0')
    normalImplementation 'com.google.firebase:firebase-analytics-ktx'
    normalImplementation 'com.google.firebase:firebase-crashlytics-ktx'

    /* ------- 其他第三方开源组件 ------- */

    final def markwon_version = '4.6.1'
    implementation "io.noties.markwon:core:$markwon_version"
    implementation "io.noties.markwon:ext-strikethrough:$markwon_version"

    def shizuku_version = '11.0.2'
    implementation "rikka.shizuku:api:$shizuku_version"
    implementation "rikka.shizuku:provider:$shizuku_version"

    implementation 'github.ryuunoakaihitomi.poweract:poweract:1.4.1'
    implementation 'github.ryuunoakaihitomi.retoast:retoast:1.3.0'
    implementation 'com.github.GrenderG:Toasty:1.5.0'
    implementation "com.github.topjohnwu.libsu:core:3.0.2"
    implementation 'commons-io:commons-io:2.8.0'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'com.drakeet.about:about:2.4.1'
    implementation 'com.google.zxing:core:3.4.1'
    implementation 'org.cyanogenmod:platform.sdk:5.0.1'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'
    debugImplementation "com.github.whataa:pandora:androidx_v2.1.0"
}

android.applicationVariants.all { variant ->

    // 规格化APK文件名
    variant.outputs.all {
        outputFileName = "${rootProject.name}-${variant.versionCode}_${variant.versionName}_${variant.buildType.name}.apk"
    }

    // 在floss变体中过滤gms插件任务
    // processFlossReleaseGoogleServices
    tasks.forEach { task ->
        final def name = task.name
        if (['Google', 'Crashlytics'].any { e -> name.contains(e) }) {
            System.out.println "G task in ${variant.flavorName} -> $name"
            if (name.contains('floss'.capitalize())) {
                System.err.println "Skip G task for floss: $name"
                task.enabled = false
            }
        }
    }
}
repositories {
    mavenCentral()
    maven {
        url 'https://raw.githubusercontent.com/ryuunoakaihitomi/maven-repository/master'
    }
}

/* AndResGuard配置 */
andResGuard {
    mappingFile = null
    use7zip = true
    useSign = true
    fixedResName = "x"
    mergeDuplicatedRes = true
    whiteList = [
            /*
            为了防止混淆后找不到资源并最精简配置，
            需要编译一个不使用ARG的release包后手动使用jadx等工具搜索getIdentifier()用法，
            并检查resources.arsc以确保豁免项存在。
             */
            "R.string.firebase_database_url",
            "R.string.gcm_defaultSenderId",
            "R.string.project_id",
            "R.string.google_app_id",
            "R.string.google_api_key",
            "R.string.google_storage_bucket",
            "R.string.com.crashlytics.android.build_id",
            // 使用资源入口名记录事件：getResourceEntryName()
            'R.string.func_*',
    ]
    compressFilePattern = [
            "*.png",
    ]
    sevenzip { artifact = 'com.tencent.mm:SevenZip:1.2.20' }
    digestalg = "SHA-256"
}
